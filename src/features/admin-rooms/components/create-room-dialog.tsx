import { useState } from 'react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import * as z from 'zod'
import {
    Dialog,
    DialogContent,
    DialogDescription,
    DialogFooter,
    DialogHeader,
    DialogTitle,
} from '@/components/ui/dialog'
import { Button } from '@/components/ui/button'
import {
    Form,
    FormControl,
    FormField,
    FormItem,
    FormLabel,
    FormMessage,
} from '@/components/ui/form'
import { Input } from '@/components/ui/input'
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from '@/components/ui/select'
import { toast } from 'sonner'
import type { Department } from '../api/departments-filter'

const formSchema = z.object({
    roomNumber: z.string().min(1, 'M√£ ph√≤ng l√† b·∫Øt bu·ªôc'),
    roomName: z.string().min(1, 'T√™n ph√≤ng l√† b·∫Øt bu·ªôc'),
    departmentId: z.string().min(1, 'Vui l√≤ng ch·ªçn khoa'),
})

type FormValues = z.infer<typeof formSchema>

type CreateRoomDialogProps = {
    open: boolean
    onOpenChange: (open: boolean) => void
    departments: Department[]
}

export function CreateRoomDialog({
    open,
    onOpenChange,
    departments,
}: CreateRoomDialogProps) {
    const [isSubmitting, setIsSubmitting] = useState(false)

    const form = useForm<FormValues>({
        resolver: zodResolver(formSchema),
        defaultValues: {
            roomNumber: '',
            roomName: '',
            departmentId: '',
        },
    })

    const onSubmit = async (values: FormValues) => {
        setIsSubmitting(true)
        try {
            console.log('Create room:', values)

            // TODO: API ch∆∞a c√≥ - gi·∫£ l·∫≠p delay
            await new Promise((resolve) => setTimeout(resolve, 1000))

            toast.info('API t·∫°o ph√≤ng ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai')
            form.reset()
            onOpenChange(false)
        } catch (error) {
            toast.error('C√≥ l·ªói x·∫£y ra')
            console.error(error)
        } finally {
            setIsSubmitting(false)
        }
    }

    return (
        <Dialog open={open} onOpenChange={onOpenChange}>
            <DialogContent className='max-w-2xl'>
                <DialogHeader>
                    <DialogTitle>Th√™m ph√≤ng kh√°m m·ªõi</DialogTitle>
                    <DialogDescription>
                        Nh·∫≠p th√¥ng tin ph√≤ng kh√°m m·ªõi
                    </DialogDescription>
                </DialogHeader>

                <Form {...form}>
                    <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-6'>
                        <FormField
                            control={form.control}
                            name='roomNumber'
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>M√£ ph√≤ng *</FormLabel>
                                    <FormControl>
                                        <Input placeholder='101A' {...field} />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />

                        <FormField
                            control={form.control}
                            name='roomName'
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>T√™n ph√≤ng *</FormLabel>
                                    <FormControl>
                                        <Input placeholder='Ph√≤ng kh√°m N·ªôi t·ªïng qu√°t' {...field} />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />

                        <FormField
                            control={form.control}
                            name='departmentId'
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Khoa *</FormLabel>
                                    <Select
                                        onValueChange={field.onChange}
                                        defaultValue={field.value}
                                    >
                                        <FormControl>
                                            <SelectTrigger>
                                                <SelectValue placeholder='Ch·ªçn khoa' />
                                            </SelectTrigger>
                                        </FormControl>
                                        <SelectContent>
                                            {departments.map((dept) => (
                                                <SelectItem key={dept.id} value={dept.id.toString()}>
                                                    {dept.name}
                                                </SelectItem>
                                            ))}
                                        </SelectContent>
                                    </Select>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />

                        <div className='rounded-lg bg-muted/50 p-4'>
                            <p className='text-sm text-muted-foreground'>
                                üí° API t·∫°o ph√≤ng ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai. Form n√†y ch·ªâ hi·ªÉn th·ªã giao di·ªán.
                            </p>
                        </div>

                        <DialogFooter>
                            <Button
                                type='button'
                                variant='outline'
                                onClick={() => onOpenChange(false)}
                            >
                                H·ªßy
                            </Button>
                            <Button type='submit' disabled={isSubmitting}>
                                {isSubmitting ? 'ƒêang t·∫°o...' : 'T·∫°o ph√≤ng'}
                            </Button>
                        </DialogFooter>
                    </form>
                </Form>
            </DialogContent>
        </Dialog>
    )
}
