import { useNavigate } from '@tanstack/react-router'
import { ArrowLeft, Calendar, User, Phone, MapPin, ChevronDown, ChevronUp } from 'lucide-react'
import { format } from 'date-fns'
import { vi } from 'date-fns/locale'
import { useState, useEffect } from 'react'
import { toast } from 'sonner'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { Skeleton } from '@/components/ui/skeleton'
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'
import { Label } from '@/components/ui/label'
import { QRPaymentModal } from '@/components/qr-payment-modal'
import { useMedicalRecordDetail, usePayCash } from '../hooks/use-medical-record-detail'
import { exportInvoiceHtml } from '../api/medical-records'
import type { MedicalRecordStatus, InvoiceDetail } from '../types'
import { createPaymentLink } from '@/features/payments/api/payments'
import { wsClient } from '@/lib/websocket-client'
import { generatePaymentQRCode } from '@/lib/qr-code-generator'

interface MedicalRecordDetailPageProps {
    id: string
}

const statusMap: Record<MedicalRecordStatus, { label: string; variant: 'default' | 'secondary' | 'destructive' | 'outline' }> = {
    CHO_KHAM: { label: 'Ch·ªù kh√°m', variant: 'secondary' },
    DANG_KHAM: { label: 'ƒêang kh√°m', variant: 'default' },
    CHO_XET_NGHIEM: { label: 'Ch·ªù x√©t nghi·ªám', variant: 'secondary' },
    HOAN_THANH: { label: 'Ho√†n th√†nh', variant: 'outline' },
    HUY: { label: 'H·ªßy', variant: 'destructive' },
}

const paymentStatusMap = {
    DA_THANH_TOAN: { label: 'ƒê√£ thanh to√°n', variant: 'outline' as const },
    THANH_TOAN_MOT_PHAN: { label: 'Thanh to√°n m·ªôt ph·∫ßn', variant: 'secondary' as const },
    CHUA_THANH_TOAN: { label: 'Ch∆∞a thanh to√°n', variant: 'default' as const },
}

const labStatusMap = {
    CHO_THUC_HIEN: { label: 'Ch·ªù th·ª±c hi·ªán', variant: 'secondary' as const },
    DANG_THUC_HIEN: { label: 'ƒêang th·ª±c hi·ªán', variant: 'default' as const },
    HOAN_THANH: { label: 'Ho√†n th√†nh', variant: 'outline' as const },
    HUY: { label: 'H·ªßy', variant: 'destructive' as const },
}

function InvoiceDetailCard({ detail }: { detail: InvoiceDetail }) {
    const [expanded, setExpanded] = useState(false)
    const hasMultipleLab = detail.multipleLab && detail.multipleLab.length > 0
    const hasSingleLab = detail.singleLab

    // Debug: log the detail structure
    console.log('üîµ InvoiceDetail:', detail)
    console.log('üîµ Detail status:', detail.status)

    // Safe access to payment status with fallback
    const paymentStatus = detail.status && paymentStatusMap[detail.status]
        ? paymentStatusMap[detail.status]
        : { label: 'Ch∆∞a x√°c ƒë·ªãnh', variant: 'secondary' as const }

    return (
        <Card>
            <CardHeader className="pb-3">
                <div className="flex items-start justify-between">
                    <div className="flex-1">
                        <CardTitle className="text-base font-semibold">{detail.healthPlanName}</CardTitle>
                        <CardDescription className="mt-1 text-sm">{detail.description}</CardDescription>
                    </div>
                    <Badge variant={paymentStatus.variant}>
                        {paymentStatus.label}
                    </Badge>
                </div>
            </CardHeader>
            <CardContent>
                <div className="grid gap-3 text-sm">
                    <div className="flex justify-between">
                        <span className="text-muted-foreground">Gi√°:</span>
                        <span className="font-medium">{detail.healthPlanPrice.toLocaleString('vi-VN')} ƒë</span>
                    </div>
                    <div className="flex justify-between">
                        <span className="text-muted-foreground">ƒê√£ thanh to√°n:</span>
                        <span className="font-medium">{detail.paid.toLocaleString('vi-VN')} ƒë</span>
                    </div>
                    {detail.paid < detail.healthPlanPrice && (
                        <div className="flex justify-between text-destructive">
                            <span>C√≤n l·∫°i:</span>
                            <span className="font-medium">
                                {(detail.healthPlanPrice - detail.paid).toLocaleString('vi-VN')} ƒë
                            </span>
                        </div>
                    )}
                    <div className="flex justify-between">
                        <span className="text-muted-foreground">Lo·∫°i d·ªãch v·ª•:</span>
                        <span>{detail.typeService === 'MULTIPLE' ? 'G√≥i nhi·ªÅu d·ªãch v·ª•' : 'D·ªãch v·ª• ƒë∆°n'}</span>
                    </div>

                    {/* Lab Orders Section */}
                    {(hasMultipleLab || hasSingleLab) && (
                        <>
                            <Separator className="my-2" />
                            <div>
                                <button
                                    onClick={() => setExpanded(!expanded)}
                                    className="flex w-full items-center justify-between text-sm font-medium hover:underline"
                                >
                                    <span>Xem chi ti·∫øt ({hasMultipleLab ? detail.multipleLab!.length : 1} m·ª•c)</span>
                                    {expanded ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
                                </button>

                                {expanded && (
                                    <div className="mt-3 space-y-3">
                                        {hasMultipleLab &&
                                            detail.multipleLab!.map((lab) => {
                                                const labStatus = lab.status && labStatusMap[lab.status]
                                                    ? labStatusMap[lab.status]
                                                    : { label: 'Ch∆∞a x√°c ƒë·ªãnh', variant: 'secondary' as const }

                                                return (
                                                    <div key={lab.id} className="rounded-lg border bg-muted/50 p-3">
                                                        <div className="mb-2 flex items-start justify-between">
                                                            <p className="font-medium">{lab.name}</p>
                                                            <Badge variant={labStatus.variant} className="ml-2 text-xs">
                                                                {labStatus.label}
                                                            </Badge>
                                                        </div>
                                                        <div className="space-y-1 text-xs text-muted-foreground">
                                                            <p>M√£: {lab.code}</p>
                                                            <p>Ph√≤ng: {lab.room}</p>
                                                            {lab.doctorPerforming && <p>B√°c sƒ©: {lab.doctorPerforming}</p>}
                                                            <p>
                                                                T·∫°o l√∫c: {format(new Date(lab.createdAt), 'dd/MM/yyyy HH:mm', { locale: vi })}
                                                            </p>
                                                        </div>
                                                    </div>
                                                )
                                            })}

                                        {hasSingleLab && (() => {
                                            const singleLabStatus = detail.singleLab!.status && labStatusMap[detail.singleLab!.status]
                                                ? labStatusMap[detail.singleLab!.status]
                                                : { label: 'Ch∆∞a x√°c ƒë·ªãnh', variant: 'secondary' as const }

                                            return (
                                                <div className="rounded-lg border bg-muted/50 p-3">
                                                    <div className="mb-2 flex items-start justify-between">
                                                        <p className="font-medium">{detail.singleLab!.name}</p>
                                                        <Badge
                                                            variant={singleLabStatus.variant}
                                                            className="ml-2 text-xs"
                                                        >
                                                            {singleLabStatus.label}
                                                        </Badge>
                                                    </div>
                                                    <div className="space-y-1 text-xs text-muted-foreground">
                                                        <p>M√£: {detail.singleLab!.code}</p>
                                                        <p>Ph√≤ng: {detail.singleLab!.room}</p>
                                                        {detail.singleLab!.doctorPerforming && (
                                                            <p>B√°c sƒ©: {detail.singleLab!.doctorPerforming}</p>
                                                        )}
                                                        <p>
                                                            T·∫°o l√∫c:{' '}
                                                            {format(new Date(detail.singleLab!.createdAt), 'dd/MM/yyyy HH:mm', { locale: vi })}
                                                        </p>
                                                    </div>
                                                </div>
                                            )
                                        })()}
                                    </div>
                                )}
                            </div>
                        </>
                    )}
                </div>
            </CardContent>
        </Card>
    )
}

export function MedicalRecordDetailPage({ id }: MedicalRecordDetailPageProps) {
    const navigate = useNavigate()
    const { data: record, isLoading, error } = useMedicalRecordDetail(id)
    const [paymentMethod, setPaymentMethod] = useState<'cash' | 'qr'>('cash')
    const [paymentSuccess, setPaymentSuccess] = useState(false)
    const { mutate: payWithCash, isPending: isPayingCash } = usePayCash()

    // QR Payment state
    const [showQRModal, setShowQRModal] = useState(false)
    const [qrCode, setQrCode] = useState<string | null>(null)
    const [orderCode, setOrderCode] = useState<number | null>(null)
    const [isCreatingQR, setIsCreatingQR] = useState(false)
    const [qrPaymentSuccess, setQrPaymentSuccess] = useState(false)

    // WebSocket cleanup on unmount
    useEffect(() => {
        return () => {
            if (wsClient.isConnected()) {
                wsClient.disconnect()
            }
        }
    }, [])

    // Helper function to print invoice
    const handlePrintInvoice = async (medicalRecordId: string) => {
        try {
            const htmlContent = await exportInvoiceHtml(Number(medicalRecordId))

            // Create a new window to display the HTML content
            const printWindow = window.open('', '_blank')
            if (printWindow) {
                printWindow.document.write(htmlContent)
                printWindow.document.close()

                // Wait for content to load then trigger print
                printWindow.onload = () => {
                    printWindow.focus()
                    printWindow.print()
                }
            } else {
                toast.error('Kh√¥ng th·ªÉ m·ªü c·ª≠a s·ªï in. Vui l√≤ng ki·ªÉm tra tr√¨nh ch·∫∑n popup.')
            }
        } catch (error) {
            console.error('Print invoice error:', error)
            toast.error('L·ªói khi in h√≥a ƒë∆°n', {
                description: error instanceof Error ? error.message : 'Vui l√≤ng th·ª≠ l·∫°i',
            })
        }
    }

    if (isLoading) {
        return (
            <div className="space-y-6">
                <div className="flex items-center gap-4">
                    <Skeleton className="h-10 w-10" />
                    <div className="space-y-2">
                        <Skeleton className="h-8 w-64" />
                        <Skeleton className="h-4 w-32" />
                    </div>
                </div>
                <div className="grid gap-6 md:grid-cols-2">
                    <Skeleton className="h-64" />
                    <Skeleton className="h-64" />
                </div>
            </div>
        )
    }

    if (error || !record) {
        return (
            <div className="flex flex-col items-center justify-center py-12">
                <p className="text-lg font-semibold text-destructive">Kh√¥ng t√¨m th·∫•y phi·∫øu kh√°m</p>
                <p className="mt-2 text-sm text-muted-foreground">
                    Phi·∫øu kh√°m kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a.
                </p>
                <Button onClick={() => navigate({ to: '/medical-records' })} className="mt-4">
                    <ArrowLeft className="mr-2 h-4 w-4" />
                    Quay l·∫°i danh s√°ch
                </Button>
            </div>
        )
    }

    const recordDate = new Date(record.date)

    return (
        <div className="space-y-6">
            {/* Header */}
            <div className="flex items-start justify-between">
                <div className="space-y-1">
                    <div className="flex items-center gap-3">
                        <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => navigate({ to: '/medical-records' })}
                        >
                            <ArrowLeft className="h-5 w-5" />
                        </Button>
                        <div>
                            <h1 className="text-2xl font-bold">Phi·∫øu kh√°m b·ªánh</h1>
                            <p className="text-sm text-muted-foreground">M√£ phi·∫øu: {record.code}</p>
                        </div>
                    </div>
                </div>
                <Badge variant={statusMap[record.status].variant} className="text-sm">
                    {statusMap[record.status].label}
                </Badge>
            </div>

            {/* Patient Information */}
            <Card>
                <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                        <User className="h-5 w-5" />
                        Th√¥ng tin b·ªánh nh√¢n
                    </CardTitle>
                </CardHeader>
                <CardContent>
                    <div className="grid gap-4 sm:grid-cols-2">
                        <div className="space-y-1">
                            <p className="text-sm text-muted-foreground">H·ªç v√† t√™n</p>
                            <p className="font-semibold">{record.patientName}</p>
                        </div>
                        <div className="space-y-1">
                            <p className="flex items-center gap-1.5 text-sm text-muted-foreground">
                                <Phone className="h-3.5 w-3.5" />
                                S·ªë ƒëi·ªán tho·∫°i
                            </p>
                            <p>{record.patientPhone || 'N/A'}</p>
                        </div>
                        <div className="space-y-1">
                            <p className="text-sm text-muted-foreground">Gi·ªõi t√≠nh</p>
                            <p>{record.patientGender === 'NAM' ? 'Nam' : record.patientGender === 'NU' ? 'N·ªØ' : 'Kh√°c'}</p>
                        </div>
                        <div className="space-y-1">
                            <p className="flex items-center gap-1.5 text-sm text-muted-foreground">
                                <MapPin className="h-3.5 w-3.5" />
                                ƒê·ªãa ch·ªâ
                            </p>
                            <p>{record.patientAddress || 'N/A'}</p>
                        </div>
                        <div className="space-y-1">
                            <p className="flex items-center gap-1.5 text-sm text-muted-foreground">
                                <Calendar className="h-3.5 w-3.5" />
                                Ng√†y kh√°m
                            </p>
                            <p>{format(recordDate, 'HH:mm dd/MM/yyyy', { locale: vi })}</p>
                        </div>
                        <div className="space-y-1">
                            <p className="text-sm text-muted-foreground">Tri·ªáu ch·ª©ng</p>
                            <p>{record.symptoms || 'Kh√¥ng c√≥ tri·ªáu ch·ª©ng'}</p>
                        </div>
                    </div>
                </CardContent>
            </Card>

            {/* Invoice Details / Services */}
            {record.invoiceDetailsResponse && record.invoiceDetailsResponse.length > 0 && (
                <div className="space-y-4">
                    <h2 className="text-xl font-semibold">Chi ti·∫øt d·ªãch v·ª•</h2>
                    <div className="grid gap-4">
                        {record.invoiceDetailsResponse.map((detail: InvoiceDetail) => (
                            <InvoiceDetailCard key={detail.id} detail={detail} />
                        ))}
                    </div>
                </div>
            )}

            {/* Summary */}
            <Card>
                <CardHeader>
                    <CardTitle>T·ªïng thanh to√°n</CardTitle>
                </CardHeader>
                <CardContent>
                    <div className="space-y-3">
                        <div className="flex justify-between text-lg">
                            <span className="font-medium">T·ªïng c·ªông:</span>
                            <span className="font-bold">{record.total.toLocaleString('vi-VN')} ƒë</span>
                        </div>
                        <div className="flex justify-between">
                            <span className="text-muted-foreground">ƒê√£ thanh to√°n:</span>
                            <span className="font-semibold text-green-600">
                                {(record.paid ?? 0).toLocaleString('vi-VN')} ƒë
                            </span>
                        </div>
                        {(record.paid ?? 0) < record.total && (
                            <div className="flex justify-between border-t pt-3">
                                <span className="font-medium text-destructive">C√≤n l·∫°i:</span>
                                <span className="font-bold text-destructive">
                                    {(record.total - (record.paid ?? 0)).toLocaleString('vi-VN')} ƒë
                                </span>
                            </div>
                        )}
                    </div>
                </CardContent>
            </Card>

            {/* Action Buttons - Only show if there's remaining balance AND payment not yet successful */}
            {(record.paid ?? 0) < record.total && !paymentSuccess && (
                <Card>
                    <CardHeader>
                        <CardTitle>Thanh to√°n</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        {/* Payment Method Selection */}
                        <div className="space-y-3">
                            <Label className="text-sm font-medium">
                                Ph∆∞∆°ng th·ª©c thanh to√°n <span className="text-destructive">*</span>
                            </Label>
                            <RadioGroup
                                value={paymentMethod}
                                onValueChange={(value) => setPaymentMethod(value as 'cash' | 'qr')}
                                className="flex flex-col space-y-2"
                            >
                                <div className="flex items-center space-x-3">
                                    <RadioGroupItem value="cash" id="cash" />
                                    <Label htmlFor="cash" className="font-normal cursor-pointer">
                                        Ti·ªÅn m·∫∑t
                                    </Label>
                                </div>
                                <div className="flex items-center space-x-3">
                                    <RadioGroupItem value="qr" id="qr" />
                                    <Label htmlFor="qr" className="font-normal cursor-pointer">
                                        Chuy·ªÉn kho·∫£n QR
                                    </Label>
                                </div>
                            </RadioGroup>
                        </div>

                        {/* Action Buttons */}
                        <div className="flex flex-wrap gap-3">
                            {paymentMethod === 'cash' ? (
                                <Button
                                    variant="default"
                                    disabled={isPayingCash}
                                    onClick={() => {
                                        // Get unpaid invoice details
                                        const unpaidInvoices = (record.invoiceDetailsResponse || []).filter(
                                            (detail) => detail.status === 'CHUA_THANH_TOAN' || detail.status === 'THANH_TOAN_MOT_PHAN'
                                        )

                                        if (unpaidInvoices.length === 0) {
                                            toast.error('Kh√¥ng c√≥ h√≥a ƒë∆°n c·∫ßn thanh to√°n')
                                            return
                                        }

                                        // Calculate total unpaid amount
                                        const totalUnpaid = unpaidInvoices.reduce((sum, detail) => {
                                            const detailPaid = detail.paid ?? 0
                                            const detailTotal = detail.healthPlanPrice ?? 0
                                            return sum + (detailTotal - detailPaid)
                                        }, 0)

                                        // Prepare payment payload
                                        const payload = {
                                            medicalRecordId: Number(record.id),
                                            healthPlanIds: unpaidInvoices.map((detail) => detail.healthPlanId),
                                            totalAmount: totalUnpaid,
                                        }

                                        console.log('üîµ Payment payload:', payload)

                                        // Call payment API and auto-print invoice on success
                                        payWithCash(payload, {
                                            onSuccess: () => {
                                                // Mark payment as successful to hide buttons
                                                setPaymentSuccess(true)

                                                // Auto print invoice after successful payment
                                                setTimeout(() => {
                                                    handlePrintInvoice(record.id)
                                                }, 500) // Small delay to ensure data is updated
                                            },
                                        })
                                    }}
                                >
                                    {isPayingCash ? 'ƒêang x·ª≠ l√Ω...' : 'X√°c nh·∫≠n thanh to√°n'}
                                </Button>
                            ) : (
                                <Button
                                    variant="default"
                                    disabled={isCreatingQR}
                                    onClick={async () => {
                                        // Get unpaid invoice details
                                        const unpaidInvoices = (record.invoiceDetailsResponse || []).filter(
                                            (detail) => detail.status === 'CHUA_THANH_TOAN' || detail.status === 'THANH_TOAN_MOT_PHAN'
                                        )

                                        if (unpaidInvoices.length === 0) {
                                            toast.error('Kh√¥ng c√≥ h√≥a ƒë∆°n c·∫ßn thanh to√°n')
                                            return
                                        }

                                        // Calculate total unpaid amount
                                        const totalUnpaid = unpaidInvoices.reduce((sum, detail) => {
                                            const detailPaid = detail.paid ?? 0
                                            const detailTotal = detail.healthPlanPrice ?? 0
                                            return sum + (detailTotal - detailPaid)
                                        }, 0)

                                        try {
                                            setIsCreatingQR(true)

                                            // Step 1: Connect to WebSocket
                                            console.log('üîµ [QR Payment] Connecting to WebSocket...')
                                            await wsClient.connect()

                                            // Step 2: Create payment link
                                            console.log('üîµ [QR Payment] Creating payment link...')
                                            const paymentData = await createPaymentLink({
                                                medicalRecordId: Number(record.id),
                                                totalAmount: totalUnpaid,
                                                healthPlanIds: unpaidInvoices.map((detail) => detail.healthPlanId),
                                                doctorId: 0, // Medical record detail kh√¥ng c√≥ doctorId, g·ª≠i 0
                                            })

                                            console.log('‚úÖ [QR Payment] Payment data received:', paymentData)

                                            // Step 3: Generate QR code image URL from qrCode string
                                            const qrCodeImageUrl = generatePaymentQRCode(paymentData.qrCode, '400x400')
                                            console.log('üîµ [QR Payment] Generated QR image URL:', qrCodeImageUrl)

                                            // Step 4: Show QR Modal
                                            setQrCode(qrCodeImageUrl) // Use generated image URL
                                            setOrderCode(paymentData.orderCode)
                                            setShowQRModal(true)
                                            setIsCreatingQR(false)

                                            // Step 4: Subscribe to payment success event
                                            console.log(`üîµ [QR Payment] Subscribing to invoice.${paymentData.invoiceId}`)
                                            const unsubscribe = wsClient.subscribeToInvoicePayment(
                                                paymentData.invoiceId,
                                                async (event) => {
                                                    console.log('‚úÖ [QR Payment] Payment success event received:', event)

                                                    // Mark payment as successful
                                                    setQrPaymentSuccess(true)
                                                    toast.success('Thanh to√°n th√†nh c√¥ng!')

                                                    // Step 5: Print invoice (API d√≤ng 3107/3113)
                                                    try {
                                                        console.log('üñ®Ô∏è [QR Payment] Printing invoice...')
                                                        await handlePrintInvoice(record.id)
                                                    } catch (error) {
                                                        console.error('‚ùå [QR Payment] Print error:', error)
                                                        toast.error('Kh√¥ng th·ªÉ in h√≥a ƒë∆°n')
                                                    }

                                                    // Cleanup
                                                    setTimeout(() => {
                                                        unsubscribe()
                                                        setShowQRModal(false)
                                                        setPaymentSuccess(true)
                                                    }, 2000)
                                                }
                                            )
                                        } catch (error) {
                                            console.error('‚ùå [QR Payment] Error:', error)
                                            setIsCreatingQR(false)
                                            toast.error(
                                                error instanceof Error ? error.message : 'Kh√¥ng th·ªÉ t·∫°o m√£ QR thanh to√°n'
                                            )
                                        }
                                    }}
                                >
                                    {isCreatingQR ? 'ƒêang t·∫°o...' : 'T·∫°o m√£ QR'}
                                </Button>
                            )}
                        </div>
                    </CardContent>
                </Card>
            )}

            {/* QR Payment Modal */}
            <QRPaymentModal
                open={showQRModal}
                qrCode={qrCode}
                orderCode={orderCode}
                amount={
                    (record.invoiceDetailsResponse || [])
                        .filter((detail) => detail.status === 'CHUA_THANH_TOAN' || detail.status === 'THANH_TOAN_MOT_PHAN')
                        .reduce((sum, detail) => {
                            const detailPaid = detail.paid ?? 0
                            const detailTotal = detail.healthPlanPrice ?? 0
                            return sum + (detailTotal - detailPaid)
                        }, 0)
                }
                isConnecting={isCreatingQR}
                paymentSuccess={qrPaymentSuccess}
                onClose={() => {
                    setShowQRModal(false)
                    setQrPaymentSuccess(false)
                }}
                onForceClose={() => {
                    setShowQRModal(false)
                    setQrPaymentSuccess(false)
                    wsClient.disconnect()
                    toast.warning('ƒê√£ h·ªßy thanh to√°n QR')
                }}
            />
        </div>
    )
}
