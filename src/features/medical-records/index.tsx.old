import { useCallback, useMemo } from 'react'
import { format } from 'date-fns'
import { getRouteApi, useNavigate } from '@tanstack/react-router'
import { useQuery, type QueryKey } from '@tanstack/react-query'
import { toast } from 'sonner'
import { Header } from '@/components/layout/header'
import { Main } from '@/components/layout/main'
import { ConfigDrawer } from '@/components/config-drawer'
import { ProfileDropdown } from '@/components/profile-dropdown'
import { Search as GlobalSearch } from '@/components/search'
import { ThemeSwitch } from '@/components/theme-switch'
import type { NavigateFn } from '@/hooks/use-table-url-state'
import { MedicalRecordsTable } from './components/medical-records-table-view'
import { fetchMedicalRecords, type MedicalRecordStatus } from './api/medical-records'
import type { MedicalRecordsSearch } from './types'

const medicalRecordsRoute = getRouteApi('/_authenticated/medical-records')
const medicalRecordsQueryBaseKey: QueryKey = ['medical-records']

const DEFAULT_PAGE = 1
const DEFAULT_PAGE_SIZE = 10

const createTodayIso = () => format(new Date(), 'yyyy-MM-dd')

const resolveKeyword = (value?: string | null) => {
  if (typeof value !== 'string') return undefined
  const trimmed = value.trim()
  return trimmed ? trimmed : undefined
}

const resolveStatus = (value?: MedicalRecordStatus[] | null) => {
  if (!Array.isArray(value) || value.length === 0) {
    return undefined
  }

  return value[0]
}

export function MedicalRecordsManagement() {
  const search = medicalRecordsRoute.useSearch() as MedicalRecordsSearch
  const navigate = medicalRecordsRoute.useNavigate()
  const globalNavigate = useNavigate()

  // Query params for API call
  const queryParams = {
    keyword: keyword || undefined,
    date: date || undefined,
    status: status,
    page,
    limit,
  }

  const { data, isLoading, error, isError } = useMedicalRecords(queryParams)

  console.log('üîµ [MedicalRecordsManagement] Query state:', { isLoading, isError, error })
  console.log('üîµ [MedicalRecordsManagement] Data:', data)

  // If there's an error, data will be undefined, so use empty arrays
  const medicalRecords = data?.medicalRecords ?? []
  const pagination = data?.pagination ?? { page: 1, pageSize: 10, total: 0, totalPages: 0 }

  const table = useReactTable<MedicalRecord>({
    data: medicalRecords,
    columns: columns as ColumnDef<MedicalRecord>[],
    getCoreRowModel: getCoreRowModel(),
    manualPagination: true,
    pageCount: pagination.totalPages || 0,
  })

  const handleSearch = () => {
    setPage(1) // Reset to first page when searching
  }

  const handleClearFilters = () => {
    setKeyword('')
    setDate('')
    setStatus(undefined)
    setPage(1)
  }

  const hasFilters = keyword || date || status

  // Show detailed error for debugging
  if (isError && error) {
    console.error('‚ùå Medical Records Error:', error)
  }

  return (
    <>
      <Header fixed>
        <GlobalSearch />
        <div className='ml-auto flex items-center space-x-4'>
          <ThemeSwitch />
          <ConfigDrawer />
          <ProfileDropdown />
        </div>
      </Header>
      <Main>
        <Card>
          <CardHeader>
            <CardTitle>Qu·∫£n l√Ω phi·∫øu kh√°m</CardTitle>
            <CardDescription>
              Danh s√°ch t·∫•t c·∫£ phi·∫øu kh√°m b·ªánh trong h·ªá th·ªëng
            </CardDescription>
          </CardHeader>
          <CardContent>
            {/* Filters */}
            <div className='mb-6 grid gap-4 md:grid-cols-2 lg:grid-cols-4'>
              <div className='space-y-2'>
                <label className='text-sm font-medium'>T√¨m ki·∫øm</label>
                <div className='flex gap-2'>
                  <Input
                    placeholder='T√™n, SƒêT, m√£ phi·∫øu...'
                    value={keyword}
                    onChange={(e) => setKeyword(e.target.value)}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter') handleSearch()
                    }}
                  />
                </div>
              </div>

              <div className='space-y-2'>
                <label className='text-sm font-medium'>Ng√†y kh√°m</label>
                <Input
                  type='date'
V·ªÅ                  value={date}
                  onChange={(e) => {
                    setDate(e.target.value)
                    setPage(1)
                  }}
                />
              </div>

              <div className='space-y-2'>
                <label className='text-sm font-medium'>Tr·∫°ng th√°i</label>
                <Select
                  value={status || '__all__'}
                  onValueChange={(value) => {
                    setStatus(value === '__all__' ? undefined : (value as MedicalRecordStatus))
                    setPage(1)
                  }}
                >
                  <SelectTrigger>
                    <SelectValue placeholder='T·∫•t c·∫£ tr·∫°ng th√°i' />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value='__all__'>T·∫•t c·∫£ tr·∫°ng th√°i</SelectItem>
                    {statusOptions.map((option) => (
                      <SelectItem key={option.value} value={option.value}>
                        {option.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className='flex items-end gap-2'>
                <Button onClick={handleSearch} className='flex-1'>
                  <Search className='mr-2 h-4 w-4' />
                  T√¨m ki·∫øm
                </Button>
                {hasFilters && (
                  <Button variant='outline' size='icon' onClick={handleClearFilters}>
                    <X className='h-4 w-4' />
                  </Button>
                )}
              </div>
            </div>

            {/* Table */}
            <div className='rounded-md border'>
              <Table>
                <TableHeader>
                  {table.getHeaderGroups().map((headerGroup) => (
                    <TableRow key={headerGroup.id}>
                      {headerGroup.headers.map((header) => (
                        <TableHead key={header.id}>
                          {header.isPlaceholder
                            ? null
                            : flexRender(header.column.columnDef.header, header.getContext())}
                        </TableHead>
                      ))}
                    </TableRow>
                  ))}
                </TableHeader>
                <TableBody>
                  {isLoading ? (
                    Array.from({ length: 5 }).map((_, index) => (
                      <TableRow key={index}>
                        {columns.map((_, colIndex) => (
                          <TableCell key={colIndex}>
                            <Skeleton className='h-8 w-full' />
                          </TableCell>
                        ))}
                      </TableRow>
                    ))
                  ) : medicalRecords.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={columns.length} className='h-24 text-center'>
                        {error ? (
                          <div className='space-y-2'>
                            <div className='text-destructive font-medium'>
                              C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu
                            </div>
                            <div className='text-sm text-muted-foreground'>
                              {error instanceof Error ? error.message : 'Vui l√≤ng th·ª≠ l·∫°i sau'}
                            </div>
                          </div>
                        ) : (
                          <div className='text-muted-foreground'>
                            Kh√¥ng t√¨m th·∫•y phi·∫øu kh√°m n√†o
                          </div>
                        )}
                      </TableCell>
                    </TableRow>
                  ) : (
                    table.getRowModel().rows.map((row) => (
                      <TableRow key={row.id}>
                        {row.getVisibleCells().map((cell) => (
                          <TableCell key={cell.id}>
                            {flexRender(cell.column.columnDef.cell, cell.getContext())}
                          </TableCell>
                        ))}
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </div>

            {/* Pagination */}
            {pagination.totalPages > 1 && (
              <div className='mt-4 flex items-center justify-between'>
                <div className='text-sm text-muted-foreground'>
                  Hi·ªÉn th·ªã {medicalRecords.length} / {pagination.total} phi·∫øu kh√°m
                </div>
                <div className='flex items-center space-x-2'>
                  <Button
                    variant='outline'
                    size='sm'
                    onClick={() => setPage((p) => Math.max(1, p - 1))}
                    disabled={page === 1}
                  >
                    Tr∆∞·ªõc
                  </Button>
                  <div className='text-sm'>
                    Trang {page} / {pagination.totalPages}
                  </div>
                  <Button
                    variant='outline'
                    size='sm'
                    onClick={() => setPage((p) => Math.min(pagination.totalPages, p + 1))}
                    disabled={page === pagination.totalPages}
                  >
                    Sau
                  </Button>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </Main>
    </>
  )
}
